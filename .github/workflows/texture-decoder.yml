name: Texture2DDecoderNative

on:
  push:
    branches: [ cross ]
    paths:
      - Texture2DDecoderNative/**
      - '.github/workflows/texture-decoder.yml'
  pull_request:
    branches: [ cross ]
    paths:
      - Texture2DDecoderNative/**

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  PROJECT_NAME: Texture2DDecoderNative

defaults:
  run:
    working-directory: Texture2DDecoderNative

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        arch: ['x86', 'x64', 'arm64']
        exclude:
          - os: 'ubuntu-latest' # FBX offers no support for linux x arm64
            arch: 'arm64'
          - os: 'macos-latest' # Apple dropped support for i363 with XCode 9.4
            arch: 'x86'

    steps:
    - uses: actions/checkout@v2

    - name: Install multilib
      if: runner.os == 'Linux' && matrix.arch == 'x86'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt update
        sudo apt install -yq gcc-multilib g++-multilib

    # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type

    - name: Configure CMake
      run: |
        $arch = '${{ matrix.arch }}'
        $buildArgs = @()
        $buildArgs += '-B${{ github.workspace }}/build'
        $buildArgs += '-DCMAKE_INSTALL_LIBDIR=${{ github.workspace }}/lib/${{ matrix.arch }}'
        $buildArgs += '-DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}'

        if ($IsWindows) {
          switch ($arch) {
            'x86' {
              $buildArgs += '-A', 'Win32'
            }
            default {
              $buildArgs += '-A', $arch
            }
          }
        }
        elseif ($IsMacOS) {
          switch ($arch) {
            'x64' {
              $buildArgs += '-D', 'CMAKE_OSX_ARCHITECTURES="x86_64"'
            }
            'arm64' {
              $buildArgs += '-D', 'CMAKE_OSX_ARCHITECTURES="arm64"'
            }
            'universal' {
              $buildArgs += '-D', 'CMAKE_OSX_ARCHITECTURES="x86_64;arm64"'
            }
            default {
              Write-Error "Unsupported architecture: $arch"
            }
          }
        }
        else {
          switch ($arch) {
            'x86' {
              $buildArgs += '-D', 'MXX=32'
            }
            'x64' {}
            default {
              Write-Error "Unsupported architecture: $arch"
            }
          }
        }
        
        $buildArgs += '${{ github.workspace }}/${{ env.PROJECT_NAME }}'        
        Start-Process cmake -ArgumentList $buildArgs -Wait
      shell: pwsh

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install
      run: cmake --install ${{github.workspace}}/build

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ env.BUILD_TYPE }}
        path: ${{github.workspace}}/lib/*
  
  publish:
    runs-on: ubuntu-latest

    needs: [ build ]

    steps:
    - uses: actions/checkout@v2
    
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2

    - name: Copy dlls to lib
      run: |
        mkdir -p lib
        cp -r ${{github.workspace}}/${{ env.PROJECT_NAME }}-*-Release/* ./lib/
        tree ./lib/

    - name: Authenticate with nuget
      run: dotnet nuget add source --username KiruyaMomochi --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/KiruyaMomochi/index.json"

    - name: Build nuget package
      run: dotnet pack ${{ env.PROJECT_NAME }}.csproj -c Release -o '${{github.workspace}}/packages'

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }}-NuGet
        path: '${{github.workspace}}/packages'

    - name: Publish nuget package
      run: dotnet nuget push '${{github.workspace}}/packages/*.nupkg' --api-key "${{ secrets.GITHUB_TOKEN }}" --source github --skip-duplicate
      shell: pwsh
