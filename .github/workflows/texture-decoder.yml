name: Texture2DDecoderNative

on:
  push:
    branches: [cross]
    paths:
      - Texture2DDecoderNative/**
      - ".github/workflows/texture-decoder.yml"
  pull_request:
    branches: [cross]
    paths:
      - Texture2DDecoderNative/**

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  PROJECT_NAME: Texture2DDecoderNative
  ARCHS: x86, x64, arm64

defaults:
  run:
    working-directory: Texture2DDecoderNative

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        # arch: ['x86', 'x64', 'arm64']
        # exclude:
        #   - os: 'ubuntu-latest' # FBX offers no support for linux x arm64
        #     arch: 'arm64'
        #   - os: 'macos-latest' # Apple dropped support for i363 with XCode 9.4
        #     arch: 'x86'

    steps:
      - uses: actions/checkout@v3

      - name: Install multilib
        if: runner.os == 'Linux'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install -yq gcc-multilib g++-multilib

      - name: Configure and Build
        shell: pwsh
        run: |
          $archs = [System.Collections.Generic.List[string]]('${{ env.ARCHS }}'.Split(',', [System.StringSplitOptions]::TrimEntries -bor [System.StringSplitOptions]::RemoveEmptyEntries))
          if ($IsMacOS) { $archs.Remove('x86') }
          if ($IsLinux) { $archs.Remove('arm64') }

          $buildType = '${{ env.BUILD_TYPE }}'
          $sourcePath = Get-Location

          foreach ($arch in $archs) {
            $buildPath = Join-Path '${{github.workspace}}/build' "${{ matrix.os }}-$arch"
            pwsh ${{ github.workspace }}/scripts/build.ps1 -Arch $arch -SourcePath $sourcePath -BuildPath $buildPath -BuildType $buildType
          }

      - name: Install
        shell: pwsh
        run: |
          $archs = [System.Collections.Generic.List[string]]('${{ env.ARCHS }}'.Split(',', [System.StringSplitOptions]::TrimEntries -bor [System.StringSplitOptions]::RemoveEmptyEntries))
          if ($IsMacOS) { $archs.Remove('x86') }
          if ($IsLinux) { $archs.Remove('arm64') }

          foreach ($arch in $archs) {
            $buildPath = Join-Path '${{github.workspace}}/build' "${{ matrix.os }}-$arch"
            cmake --install $buildPath --prefix ${{github.workspace}}/install/$arch
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ env.BUILD_TYPE }}
          path: ${{github.workspace}}/install/**

  build-android:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure and Build
        shell: pwsh
        run: |
          $androidAbis = 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
          $buildType = '${{ env.BUILD_TYPE }}'
          $sourcePath = Get-Location
          $toolchain = Join-Path -Resolve $env:ANDROID_NDK_LATEST_HOME build cmake android.toolchain.cmake

          foreach ($abi in $androidAbis) {
            $buildPath = Join-Path '${{github.workspace}}' 'build' "android-$abi"
            pwsh ${{ github.workspace }}/scripts/build.ps1 -SourcePath $sourcePath -BuildPath $buildPath -BuildType $buildType "-DANDROID_ABI=$abi" -DANDROID_PLATFORM=android-19 "-DCMAKE_TOOLCHAIN_FILE=$toolchain"
          }

      - name: Install
        shell: pwsh
        run: |
          $androidAbis = 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'

          foreach ($abi in $androidAbis) {
            $buildPath = Join-Path '${{github.workspace}}' 'build' "android-$abi"
            cmake --install $buildPath --prefix ${{github.workspace}}/install/android-$abi
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROJECT_NAME }}-android-${{ env.BUILD_TYPE }}
          path: ${{github.workspace}}/install/**

  build-wasm:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Checkout emsdk
        uses: actions/checkout@v3
        with:
          repository: emscripten-core/emsdk
          path: emsdk
      - name: Install emsdk
        shell: pwsh
        run: |
          $dotnetVersion = (dotnet --version).Split('.')
          if ($dotnetVersion[-1].Length -eq 3) {
            $dotnetVersion[-1] = $dotnetVersion[-1][0]
          }
          $dotnetVersion = $dotnetVersion -join '.'
          $emsdkVersion = (Invoke-WebRequest https://github.com/dotnet/runtime/raw/v$dotnetVersion/src/mono/wasm/emscripten-version.txt).Content

          Write-Host "Using emsdk $emsdkVersion for dotnet $dotnetVersion"

          cd ${{ github.workspace }}/emsdk
          ./emsdk install $emsdkVersion
          ./emsdk activate $emsdkVersion
          (Invoke-WebRequest https://gist.githubusercontent.com/KiruyaMomochi/228fb8fda90c0428dd3ca19e26652b4d/raw/8d3056751eff5bdd20271fbd0fad2082d5b7359b/emsdk_pwsh_cross.patch).Content | git apply -

      - name: Configure and Build
        shell: pwsh
        run: |
          . ${{ github.workspace }}/emsdk/emsdk_env.ps1

          $buildType = '${{ env.BUILD_TYPE }}'
          $sourcePath = Get-Location
          $buildPath = Join-Path '${{github.workspace}}' 'build' "wasm"
          New-Item -ItemType Directory -Force -Path $buildPath

          emcmake cmake $sourcePath -B $buildPath -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_SHARED_LIBS=OFF
          cmake --build $buildPath --config $buildType

      - name: Install
        shell: pwsh
        run: |
          $buildPath = Join-Path '${{github.workspace}}' 'build' "wasm"
          cmake --install $buildPath --prefix ${{github.workspace}}/install/wasm

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROJECT_NAME }}-wasm-${{ env.BUILD_TYPE }}
          path: ${{github.workspace}}/install/**

  publish:
    runs-on: ubuntu-latest

    needs: [build, build-android, build-wasm]

    steps:
      - uses: actions/checkout@v3

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: Copy dlls to build
        run: |
          mkdir -p build
          cp -r ${{github.workspace}}/${{ env.PROJECT_NAME }}-*-Release/* ./build/
          tree ./build/

      - name: Authenticate with nuget
        run: dotnet nuget add source --username KiruyaMomochi --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/KiruyaMomochi/index.json"

      - name: Build nuget package
        run: dotnet pack ${{ env.PROJECT_NAME }}.csproj -c Release -o '${{github.workspace}}/packages'

      - name: Build nuget package (Android)
        run: dotnet pack ${{ env.PROJECT_NAME }}.Android.csproj -c Release -o '${{github.workspace}}/packages'

      - name: Build nuget package (WebAssembly)
        run: dotnet pack ${{ env.PROJECT_NAME }}.WebAssembly.csproj -c Release -o '${{github.workspace}}/packages'

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROJECT_NAME }}-NuGet
          path: "${{github.workspace}}/packages"

      - name: Publish nuget package
        run: dotnet nuget push '${{github.workspace}}/packages/*.nupkg' --api-key "${{ secrets.GITHUB_TOKEN }}" --source github --skip-duplicate
        shell: pwsh
