name: AssetStudioFBXNative

on:
  push:
    branches: [ cross-test ]
    paths:
      - AssetStudioFBXNative/**
      - '.github/workflows/fbx.yml'
  pull_request:
    branches: [ cross-test ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  # Set a user agent for wget to be able to download the installation packages
  USER_AGENT: "Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0"
  PROJECT_NAME: AssetStudioFBXNative
  PACKAGE_NAME: Kyaru.AssetStudio.FBXNative
  FBX_VERSION: "2020.2.1"

defaults:
  run:
    working-directory: AssetStudioFBXNative

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        arch: ['x86', 'x64', 'arm64']
        exclude:
          - os: 'ubuntu-latest' # FBX offers no support for linux x arm64
            arch: 'arm64'
          - os: 'macos-latest' # Apple dropped support for i363 with XCode 9.4
            arch: 'x86'

    steps:
    - uses: actions/checkout@v2

    - name: Download FBX SDK
      run: |
        $fbxsdk = "${{github.workspace}}/fbxsdk"
        $y, $m, $d = '${{ env.FBX_VERSION }}'.Split('.')
        $fbxVersionDash = "$y-$m-$d"
        $fbxVersionJoin = "$y$m$d"
        $binBase = "fbx${fbxVersionJoin}_fbxsdk"
        $urlBase = "https://www.autodesk.com/content/dam/autodesk/www/adn/fbx/$fbxVersionDash"

        New-Item -ItemType Directory -Force -Path $fbxsdk
        Push-Location -Path $fbxsdk

        if ($IsWindows) {
          $file = "${binBase}_vs2019_win.exe"
          $uri = "${urlBase}/${file}"

          Write-Host $uri
          Invoke-WebRequest -UserAgent '${{ env.USER_AGENT }}' -Uri $uri -OutFile $file
          7z x $file
        }
        elseif ($IsMacOS) {
          $file = "${binBase}_clang_mac.pkg.tgz"
          $uri = "${urlBase}/${file}"

          Write-Host $uri
          Invoke-WebRequest -UserAgent '${{ env.USER_AGENT }}' -Uri $uri -OutFile $file
          tar -xzf $file
          pkgutil --expand "${binBase}_clang_macos.pkg" $binBase
          tar -xzf $binBase/Root.pkg/Payload --strip-components=5
        }
        else {
          $file = "${binBase}_linux.tar.gz"
          $uri = "${urlBase}/${file}"

          Write-Host $uri
          Invoke-WebRequest -UserAgent '${{ env.USER_AGENT }}' -Uri $uri -OutFile $file
          tar -xzf $file
          "yes`nn" | & "./${binBase}_linux" .
        }
        
        Remove-Item -Recurse -Force -Path "${binBase}*"
        Pop-Location
      working-directory: .
      shell: pwsh

    - name: Install multilib
      if: runner.os == 'Linux' && matrix.arch == 'x86'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt update
        sudo apt install -yq gcc-multilib g++-multilib
        sudo apt install zlib1g-dev:i386 libsnappy-dev:i386 liblz4-dev:i386 libxml2-dev:i386

    # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type

    - name: Configure CMake
      run: |
        $arch = '${{ matrix.arch }}'
        $buildArgs = @()
        $buildArgs += '-B', '${{ github.workspace }}/build'
        $buildArgs += '-D', 'FBX_SDK_ROOT=${{github.workspace}}/fbxsdk'
        $buildArgs += '-D', 'CMAKE_INSTALL_LIBDIR=${{github.workspace}}/lib/${{ matrix.arch }}'
        $buildArgs += '-D', 'CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}'

        if ($IsWindows) {
          switch ($arch) {
            'x86' {
              $buildArgs += '-A', 'Win32'
            }
            default {
              $buildArgs += '-A', $arch
            }
          }
        }
        elseif ($IsMacOS) {
          switch ($arch) {
            'x64' {
              $buildArgs += '-D', 'CMAKE_OSX_ARCHITECTURES="x86_64"'
            }
            'arm64' {
              $buildArgs += '-D', 'CMAKE_OSX_ARCHITECTURES="arm64"'
            }
            'universal' {
              $buildArgs += '-D', 'CMAKE_OSX_ARCHITECTURES="x86_64;arm64"'
            }
            default {
              Write-Error "Unsupported architecture: $arch"
            }
          }
        }
        else {
          switch ($arch) {
            'x86' {
              $buildArgs += '-D', 'MXX=32'
            }
            'x64' {}
            default {
              Write-Error "Unsupported architecture: $arch"
            }
          }
        }
        
        $buildArgs += '${{ github.workspace }}/${{ env.PROJECT_NAME }}'    
        Write-Host $buildArgs
        Start-Process cmake -ArgumentList $buildArgs -Wait
      shell: pwsh

    - name: Build
      # Build your program with the given configuration
      run: cmake --build '${{ github.workspace }}/build' --config ${{env.BUILD_TYPE}}

    - name: Install
      run: cmake --install '${{ github.workspace }}/build'

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.os }}-${{ matrix.arch }}-${{ env.BUILD_TYPE }}
        path: ${{github.workspace}}/lib/
  
  publish:
    runs-on: ubuntu-latest

    needs: [ build ]

    steps:
    - uses: actions/checkout@v2
    
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2

    - name: Copy dlls to lib
      run: |
        mkdir -p lib
        cp -r ${{github.workspace}}/${{ env.PROJECT_NAME }}-*-*-Release/* ./lib/
        tree ./lib/
    
    - name: Build nuget package
      run: dotnet pack ${{ env.PROJECT_NAME }}.csproj -c Release

    - name: Authenticate with nuget
      run: dotnet nuget add source --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/KiruyaMomochi/index.json"

    - name: Publish nuget package
      run: |
        [xml]$solution = Get-Content ./${{ env.PROJECT_NAME }}.csproj
        $version = $solution.Project.PropertyGroup.Version
        dotnet nuget push "bin/Release/${{ env.PACKAGE_NAME }}.$version.nupkg" --api-key "${{ secrets.GITHUB_TOKEN }}" --source github --skip-duplicate
      shell: pwsh
