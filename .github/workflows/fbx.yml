name: AssetStudioFBXNative

on:
  push:
    branches: [ cross ]
  pull_request:
    branches: [ cross ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

defaults:
  run:
    working-directory: AssetStudioFBXNative

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Download FBX SDK
      run: |
        $fbxsdk = "${{github.workspace}}/fbxsdk"
        New-Item -ItemType Directory -Force -Path $fbxsdk
        Push-Location -Path $fbxsdk

        if ($IsWindows) {
          Invoke-WebRequest -UserAgent 'Firefox' -Uri 'https://www.autodesk.com/content/dam/autodesk/www/adn/fbx/2020-2-1/fbx202021_fbxsdk_vs2019_win.exe' -OutFile './fbxsdk_vs2019_win.exe'
          7z x fbxsdk_vs2019_win.exe
          Set-Location -Path samples
          
          (Get-Content .\CMakeSettings.txt -Raw).ReplaceLineEndings("`n").Replace('
              ELSEIF(MSVC_VERSION GREATER 1910 AND MSVC_VERSION LESS 2000)
                  SET(FBX_COMPILER "vs2017")', '
              ELSEIF(MSVC_VERSION GREATER 1910 AND MSVC_VERSION LESS 1920)
                  SET(FBX_COMPILER "vs2017")
              ELSEIF(MSVC_VERSION GREATER 1920 AND MSVC_VERSION LESS 2000)
                  SET(FBX_COMPILER "vs2019")').ReplaceLineEndings() | Set-Content .\CMakeSettings.txt
        }
        elseif ($IsMacOS) {
          Invoke-WebRequest -UserAgent 'Firefox' -Uri 'https://www.autodesk.com/content/dam/autodesk/www/adn/fbx/2020-2-1/fbx202021_fbxsdk_clang_mac.pkg.tgz' -OutFile './fbx202021_fbxsdk_clang_mac.pkg.tgz'
          tar -xzf fbx202021_fbxsdk_clang_mac.pkg.tgz
          pkgutil --expand fbx202021_fbxsdk_clang_macos.pkg fbx202021_fbxsdk_clang_macos
          tar -xzf fbx202021_fbxsdk_clang_macos/Root.pkg/Payload --strip-components=5
        }
        else {
          Invoke-WebRequest -UserAgent 'Firefox' -Uri 'https://www.autodesk.com/content/dam/autodesk/www/adn/fbx/2020-2-1/fbx202021_fbxsdk_linux.tar.gz' -OutFile './fbxsdk_linux.tar.gz'
          tar -xzf fbxsdk_linux.tar.gz
          "yes`nn" | ./fbx202021_fbxsdk_linux .
        }

        Pop-Location
      working-directory: .
      shell: pwsh

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{github.workspace}}/build 
        -D FBX_SDK_ROOT=${{github.workspace}}/fbxsdk
        -D CMAKE_INSTALL_LIBDIR=${{github.workspace}}/lib
        -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 
        ${{github.workspace}}/AssetStudioFBXNative

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install
      run: cmake --install ${{github.workspace}}/build

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: AssetStudioFBXNative-${{ matrix.os }}-${{ env.BUILD_TYPE }}
        path: ${{github.workspace}}/lib/*
  
  publish:
    runs-on: ubuntu-latest

    needs: [ build ]

    steps:
    - uses: actions/checkout@v2
    
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2

    - name: Copy dlls to lib
      run: |
        mkdir -p lib/x64
        cp ${{github.workspace}}/AssetStudioFBXNative-*-Release/* ./lib/x64/
    
    - name: Build nuget package
      run: dotnet pack AssetStudioFBXNative.csproj -c Release

    - name: Authenticate with nuget
      run: dotnet nuget add source --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/KiruyaMomochi/index.json"

    - name: Publish nuget package
      run: |
        [xml]$solution = Get-Content ./AssetStudioFBXNative.csproj
        $version = $solution.Project.PropertyGroup.Version
        dotnet nuget push "bin/Release/Kyaru.AssetStudioFBXNative.$version.nupkg" --api-key "${{ secrets.GITHUB_TOKEN }}" --source github
      shell: pwsh
